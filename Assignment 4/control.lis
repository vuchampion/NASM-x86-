     1                                  extern printf
     2                                  
     3                                  global sum
     4                                  
     5                                  segment .data
     6                                  
     7                                  segment .bss
     8 00000000 <res 00000008>          sum_value resq 1
     9                                  
    10                                  segment .text
    11 00000000 5468652073756D2E61-     welcome_message db "The sum.asm module has begun executing", 10, 0
    11 00000009 736D206D6F64756C65-
    11 00000012 206861732062656775-
    11 0000001B 6E2065786563757469-
    11 00000024 6E670A00           
    12 00000028 46726F6D2053756D3A-     print_i db "From Sum: register r10 contains: %ld", 10, 0
    12 00000031 207265676973746572-
    12 0000003A 2072313020636F6E74-
    12 00000043 61696E733A20256C64-
    12 0000004C 0A00               
    13                                  
    14                                  sum:
    15                                  
    16 0000004E 55                      push rbp                                                    ;Backup the base pointer
    17 0000004F 4889E5                  mov  rbp,rsp                                                ;Advance the base pointer to start of the current stack frame
    18 00000052 57                      push rdi                                                    ;Backup rdi
    19 00000053 56                      push rsi                                                    ;Backup rsi
    20 00000054 52                      push rdx                                                    ;Backup rdx
    21 00000055 51                      push rcx                                                    ;Backup rcx
    22 00000056 4150                    push r8                                                     ;Backup r8
    23 00000058 4151                    push r9                                                     ;Backup r9
    24                                  ;push r10                                                    ;Backup r10
    25 0000005A 4153                    push r11                                                    ;Backup r11: printf often changes r11
    26 0000005C 4154                    push r12                                                    ;Backup r12
    27 0000005E 4155                    push r13                                                    ;Backup r13
    28 00000060 4156                    push r14                                                    ;Backup r14
    29 00000062 4157                    push r15                                                    ;Backup r15
    30 00000064 53                      push rbx                                                    ;Backup rbx
    31 00000065 9C                      pushf                                                       ;Backup rflags
    32                                  ;--------------------------------------------------------------------------------------------------
    33                                  
    34 00000066 B800000000              mov rax, 0
    35 0000006B 48BF-                   mov rdi, welcome_message
    35 0000006D [0000000000000000] 
    36 00000075 E8(00000000)            call printf
    37                                  
    38 0000007A 41BA00000000            mov r10, 0 ;sum of all the indexes
    39 00000080 4D8B07                  mov r8, [r15+8*0]
    40 00000083 4D8B4F08                mov r9, [r15+8*1]
    41 00000087 4D8B5F10                mov r11, [r15+8*2]
    42 0000008B 4D8B6718                mov r12, [r15+8*3]
    43 0000008F 4D8B6F20                mov r13, [r15+8*4]
    44                                  
    45 00000093 4D01C2                  add r10, r8
    46 00000096 4D01CA                  add r10, r9
    47 00000099 4D01DA                  add r10, r11
    48 0000009C 4D01E2                  add r10, r12
    49 0000009F 4D01EA                  add r10, r13
    50                                  
    51 000000A2 B800000000              mov rax, 0
    52 000000A7 48BF-                   mov rdi, print_i
    52 000000A9 [2800000000000000] 
    53 000000B1 4C89D6                  mov rsi, r10
    54 000000B4 E8(00000000)            call printf
    55                                  
    56                                  ;--------------------------------------------------------------------------------------------------
    57 000000B9 9D                      popf                                                        ;Restore rflags
    58 000000BA 5B                      pop rbx                                                     ;Restore rbx
    59 000000BB 415F                    pop r15                                                     ;Restore r15
    60 000000BD 415E                    pop r14                                                     ;Restore r14
    61 000000BF 415D                    pop r13                                                     ;Restore r13
    62 000000C1 415C                    pop r12                                                     ;Restore r12
    63 000000C3 415B                    pop r11                                                     ;Restore r11
    64                                  ;pop r10                                                     ;Restore r10
    65 000000C5 4159                    pop r9                                                      ;Restore r9
    66 000000C7 4158                    pop r8                                                      ;Restore r8
    67 000000C9 59                      pop rcx                                                     ;Restore rcx
    68 000000CA 5A                      pop rdx                                                     ;Restore rdx
    69 000000CB 5E                      pop rsi                                                     ;Restore rsi
    70 000000CC 5F                      pop rdi                                                     ;Restore rdi
    71 000000CD 5D                      pop rbp                                                     ;Restore rbp
    72                                  
    73 000000CE 4C89D0                  mov rax, r10
    74 000000D1 C3                      ret
