     1                                  extern printf
     2                                  extern scanf
     3                                  global adding_two_integers
     4                                  
     5                                  segment .data
     6 00000000 456E74657220616E20-     prompt db "Enter an integer.", 10, 0
     6 00000009 696E74656765722E0A-
     6 00000012 00                 
     7 00000013 596F757220696E7465-     confirm db "Your integer was: %d", 10, 0
     7 0000001C 676572207761733A20-
     7 00000025 25640A00           
     8 00000029 596F757220696E7465-     greater db "Your integer was greater than 50", 10, 0
     8 00000032 676572207761732067-
     8 0000003B 726561746572207468-
     8 00000044 616E2035300A00     
     9 0000004B 596F757220696E7465-     lesser db "Your integer was less than 50", 10, 0
     9 00000054 67657220776173206C-
     9 0000005D 657373207468616E20-
     9 00000066 35300A00           
    10 0000006A 256400                  integer_format db "%d", 0
    11                                  
    12                                  segment .bss
    13                                  
    14                                  segment .text
    15                                  
    16                                  adding_two_integers:
    17                                  
    18 00000000 B800000000              mov rax, 0
    19 00000005 48BF-                   mov rdi, prompt
    19 00000007 [0000000000000000] 
    20 0000000F E8(00000000)            call printf
    21                                  
    22 00000014 6A00                    push qword 0
    23 00000016 B800000000              mov rax, 0
    24 0000001B 48BF-                   mov rdi, integer_format
    24 0000001D [6A00000000000000] 
    25 00000025 4889E6                  mov rsi, rsp
    26 00000028 E8(00000000)            call scanf
    27 0000002D 4C8B3C24                mov r15, [rsp]
    28 00000031 58                      pop rax
    29                                  
    30 00000032 B800000000              mov rax, 0
    31 00000037 48BF-                   mov rdi, confirm
    31 00000039 [1300000000000000] 
    32 00000041 4C89FE                  mov rsi, r15
    33 00000044 E8(00000000)            call printf
    34                                  
    35 00000049 4983FF32                cmp r15, 50
    36 0000004D 7F16                    jg greater_than
    37 0000004F B800000000              mov rax, 0
    38 00000054 48BF-                   mov rdi, lesser
    38 00000056 [4B00000000000000] 
    39 0000005E E8(00000000)            call printf
    40 00000063 EB14                    jmp exit
    41                                  greater_than:
    42 00000065 B800000000              mov rax, 0
    43 0000006A 48BF-                   mov rdi, greater
    43 0000006C [2900000000000000] 
    44 00000074 E8(00000000)            call printf
    45                                  
    46                                  exit:
    47                                  
    48 00000079 B800000000              mov rax, 0
    49 0000007E C3                      ret
