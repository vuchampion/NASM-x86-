     1                                  extern printf
     2                                  extern scanf
     3                                  global assignment2
     4                                  
     5                                  segment .data
     6                                  
     7 00000000 546865205838362050-     welcome_message db "The X86 Program has begun", 10, 0
     7 00000009 726F6772616D206861-
     7 00000012 7320626567756E0A00 
     8 0000001B 506C6561736520656E-     first_integer_prompt db "Please enter the first integer and press enter: ", 0
     8 00000024 746572207468652066-
     8 0000002D 6972737420696E7465-
     8 00000036 67657220616E642070-
     8 0000003F 7265737320656E7465-
     8 00000048 723A2000           
     9 0000004C 506C6561736520656E-     second_integer_prompt db "Please enter the second integer and press enter: ", 0
     9 00000055 746572207468652073-
     9 0000005E 65636F6E6420696E74-
     9 00000067 6567657220616E6420-
     9 00000070 707265737320656E74-
     9 00000079 65723A2000         
    10 0000007E 256C6400                integer_format db "%ld", 0
    11 00000082 5468652074776F206E-     two_numbers db "The two numbers we have are: %ld & %ld", 10, 0
    11 0000008B 756D62657273207765-
    11 00000094 206861766520617265-
    11 0000009D 3A20256C6420262025-
    11 000000A6 6C640A00           
    12 000000AA 546865206E756D6265-     confirmation db "The number you have entered is: %ld", 10, 0
    12 000000B3 7220796F7520686176-
    12 000000BC 6520656E7465726564-
    12 000000C5 2069733A20256C640A-
    12 000000CE 00                 
    13 000000CF 546869732072656769-     print_register db "This register contains the value: %ld", 10, 0
    13 000000D8 7374657220636F6E74-
    13 000000E1 61696E732074686520-
    13 000000EA 76616C75653A20256C-
    13 000000F3 640A00             
    14 000000F6 5468652071756F7469-     division_result db "The quotient is: %ld The remainder is: %ld", 10, 0
    14 000000FF 656E742069733A2025-
    14 00000108 6C6420546865207265-
    14 00000111 6D61696E6465722069-
    14 0000011A 733A20256C640A00   
    15                                  
    16                                  segment .bss
    17                                  
    18                                  segment .text
    19                                  
    20                                  assignment2:
    21 00000000 55                      push       rbp                                              ;Save a copy of the stack base pointer
    22 00000001 4889E5                  mov        rbp, rsp                                         ;We do this in order to be 100% compatible with C and C++.
    23 00000004 53                      push       rbx                                              ;Back up rbx
    24 00000005 51                      push       rcx                                              ;Back up rcx
    25 00000006 52                      push       rdx                                              ;Back up rdx
    26 00000007 56                      push       rsi                                              ;Back up rsi
    27 00000008 57                      push       rdi                                              ;Back up rdi
    28 00000009 4150                    push       r8                                               ;Back up r8
    29 0000000B 4151                    push       r9                                               ;Back up r9
    30 0000000D 4152                    push       r10                                              ;Back up r10
    31 0000000F 4153                    push       r11                                              ;Back up r11
    32 00000011 4154                    push       r12                                              ;Back up r12
    33 00000013 4155                    push       r13                                              ;Back up r13
    34 00000015 4156                    push       r14                                              ;Back up r14
    35 00000017 4157                    push       r15                                              ;Back up r15
    36 00000019 9C                      pushf
    37                                  
    38                                  ;registers r10 and r11 do not function properly
    39                                  ;registers r8 and r9 also do not function properly                                                     ;Back up rflags
    40                                  
    41                                  
    42 0000001A B800000000              mov rax, 0
    43 0000001F 48BF-                   mov rdi, welcome_message
    43 00000021 [0000000000000000] 
    44 00000029 E8(00000000)            call printf
    45                                  
    46 0000002E B800000000              mov rax, 0
    47 00000033 48BF-                   mov rdi, first_integer_prompt
    47 00000035 [1B00000000000000] 
    48 0000003D E8(00000000)            call printf
    49                                  
    50 00000042 6A00                    push qword 0
    51 00000044 6A00                    push qword 0
    52 00000046 B800000000              mov rax, 0
    53 0000004B 48BF-                   mov rdi, integer_format
    53 0000004D [7E00000000000000] 
    54 00000055 4889E6                  mov rsi, rsp
    55 00000058 E8(00000000)            call scanf
    56 0000005D 4C8B2424                mov r12, [rsp]
    57 00000061 58                      pop rax
    58 00000062 58                      pop rax
    59                                  
    60 00000063 B800000000              mov rax, 0
    61 00000068 48BF-                   mov rdi, print_register
    61 0000006A [CF00000000000000] 
    62 00000072 4C89E6                  mov rsi, r12
    63 00000075 E8(00000000)            call printf
    64                                  
    65 0000007A B800000000              mov rax, 0
    66 0000007F 48BF-                   mov rdi, second_integer_prompt
    66 00000081 [4C00000000000000] 
    67 00000089 E8(00000000)            call printf
    68                                  
    69 0000008E 6A00                    push qword 0
    70 00000090 6A00                    push qword 0
    71 00000092 B800000000              mov rax, 0
    72 00000097 48BF-                   mov rdi, integer_format
    72 00000099 [7E00000000000000] 
    73 000000A1 4889E6                  mov rsi, rsp
    74 000000A4 E8(00000000)            call scanf
    75 000000A9 4C8B2C24                mov r13, [rsp]
    76 000000AD 58                      pop rax
    77 000000AE 58                      pop rax
    78                                  
    79 000000AF B800000000              mov rax, 0
    80 000000B4 48BF-                   mov rdi, print_register
    80 000000B6 [CF00000000000000] 
    81 000000BE 4C89EE                  mov rsi, r13
    82 000000C1 E8(00000000)            call printf
    83                                  
    84 000000C6 B800000000              mov rax, 0
    85 000000CB 48BF-                   mov rdi, two_numbers
    85 000000CD [8200000000000000] 
    86 000000D5 4C89E6                  mov rsi, r12
    87 000000D8 4C89EA                  mov rdx, r13
    88 000000DB E8(00000000)            call printf
    89                                  
    90                                  ;mov rax, r14
    91                                  ;cqo
    92                                  ;idiv r15
    93                                  ;mov r13, rax
    94                                  ;mov r12, rdx
    95                                  
    96                                  ;mov rax, 0
    97                                  ;mov rdi, division_result
    98                                  ;mov rsi, r13
    99                                  ;mov rdx, r12
   100                                  ;call printf
   101                                  
   102 000000E0 9D                      popf                                                        ;Restore rflags
   103 000000E1 415F                    pop        r15                                              ;Restore r15
   104 000000E3 415E                    pop        r14                                              ;Restore r14
   105 000000E5 415D                    pop        r13                                              ;Restore r13
   106 000000E7 415C                    pop        r12                                              ;Restore r12
   107 000000E9 415B                    pop        r11                                              ;Restore r11
   108 000000EB 415A                    pop        r10                                              ;Restore r10
   109 000000ED 4159                    pop        r9                                               ;Restore r9
   110 000000EF 4158                    pop        r8                                               ;Restore r8
   111 000000F1 5F                      pop        rdi                                              ;Restore rdi
   112 000000F2 5E                      pop        rsi                                              ;Restore rsi
   113 000000F3 5A                      pop        rdx                                              ;Restore rdx
   114 000000F4 59                      pop        rcx                                              ;Restore rcx
   115 000000F5 5B                      pop        rbx                                              ;Restore rbx
   116 000000F6 5D                      pop        rbp                                              ;Restore rbp
   117                                  
   118 000000F7 41B900000000            mov r9, 0
   119 000000FD 4C89C8                  mov rax, r9 ;return 0 to the OS
   120 00000100 C3                      ret
