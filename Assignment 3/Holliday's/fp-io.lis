     1                                  ;****************************************************************************************************************************
     2                                  ;Program name: "Control-D Example".  This program demonstrates the use of Control-D to terminate an input sequence.         *
     3                                  ;Copyright (C) 2018  Floyd Holliday                                                                                         *
     4                                  ;This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License  *
     5                                  ;version 3 as published by the Free Software Foundation.                                                                    *
     6                                  ;This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied         *
     7                                  ;warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.     *
     8                                  ;A copy of the GNU General Public License v3 is available here:  <https://www.gnu.org/licenses/>.                           *
     9                                  ;****************************************************************************************************************************
    10                                  ;
    11                                  ;
    12                                  ;
    13                                  ;
    14                                  ;========1=========2=========3=========4=========5=========6=========7=========8=========9=========0=========1=========2=========3**
    15                                  ;Author information
    16                                  ;  Author name: Floyd Holliday
    17                                  ;  Author email: holliday@fullerton.edu
    18                                  ;
    19                                  ;Program information
    20                                  ;  Program name: Control D Example
    21                                  ;  Programming languages: One modules in C++, one module in X86-64, and one module in Bash.
    22                                  ;  Date program began: 2018-Feb-12
    23                                  ;  Date of last update: 2018-Feb-13
    24                                  ;  Files in this program: control-d-main.cpp, control-d.asm, r.sh
    25                                  ;  Status: This program was tested over a dozen times on Debian9.3.0 (Feb 2018) without errors.
    26                                  ;  Purpose: The intent of this program is to show how to terminate an input loop with the Cntl-D input.
    27                                  ;
    28                                  ;This file
    29                                  ;  Name: control-d.asm
    30                                  ;  Language: X86-64
    31                                  ;  Syntax: Intel
    32                                  ;  Assemble: nasm -f elf64 -l control-d.lis -o control-d.o control-d.asm
    33                                  ;  Purpose: Set up a loop that terminates on a control-d signal from the keyboard.
    34                                  ;  Max page width: 132 columns
    35                                  ;  Begin comments: column 61
    36                                  ;  Optimal print specification: 132 columns wide, monospace, 8Â½x11 paper
    37                                  ;
    38                                  ;
    39                                  ;
    40                                  ;
    41                                  ;========1=========2=========3=========4=========5=========6=========7=========8=========9=========0=========1=========2=========3**
    42                                  ;
    43                                  ;===== Begin code area ============================================================================================================
    44                                  
    45                                  ;%include "debug.inc"                                        ;The debug tool was used during the development of this program.
    46                                  
    47                                  extern printf                                               ;External C++ function for writing to standard output device
    48                                  
    49                                  extern scanf                                                ;External C++ function for reading from the standard input device
    50                                  
    51                                  global control_d                                            ;Enable this program to be called from outside this file.
    52                                  
    53                                  segment .data                                               ;Place initialized data here
    54                                  
    55                                  ;===== Declare some messages ======================================================================================================
    56                                  ;The identifiers in this segment are quadword pointers to ascii strings stored in heap space.  They are not variables.  They are
    57                                  ;not constants.  There are no constants in assembly programming.  There are no variables in assembly programming: the registers
    58                                  ;assume the role of variables.
    59                                  
    60 00000000 546869732058383620-     initialmessage db "This X86 program will demonstrate the use of Control-D to terminate a loop.", 10, 0
    60 00000009 70726F6772616D2077-
    60 00000012 696C6C2064656D6F6E-
    60 0000001B 737472617465207468-
    60 00000024 6520757365206F6620-
    60 0000002D 436F6E74726F6C2D44-
    60 00000036 20746F207465726D69-
    60 0000003F 6E6174652061206C6F-
    60 00000048 6F702E0A00         
    61                                  
    62 0000004D 456E74657220612073-     promptmessage db "Enter a sequence of floating point numbers in base 10 separate each number with white space.  After the last "
    62 00000056 657175656E6365206F-
    62 0000005F 6620666C6F6174696E-
    62 00000068 6720706F696E74206E-
    62 00000071 756D6265727320696E-
    62 0000007A 206261736520313020-
    62 00000083 736570617261746520-
    62 0000008C 65616368206E756D62-
    62 00000095 657220776974682077-
    62 0000009E 686974652073706163-
    62 000000A7 652E20204166746572-
    62 000000B0 20746865206C617374-
    62 000000B9 20                 
    63 000000BA 76616C696420696E70-                   db "valid input press 'enter' followed by a control+D to terminate: ", 10, 0
    63 000000C3 757420707265737320-
    63 000000CC 27656E746572272066-
    63 000000D5 6F6C6C6F7765642062-
    63 000000DE 79206120636F6E7472-
    63 000000E7 6F6C2B4420746F2074-
    63 000000F0 65726D696E6174653A-
    63 000000F9 200A00             
    64                                  
    65 000000FC 596F75206861766520-     count_message db "You have entered %1ld floating point numbers.", 10, 0
    65 00000105 656E74657265642025-
    65 0000010E 316C6420666C6F6174-
    65 00000117 696E6720706F696E74-
    65 00000120 206E756D626572732E-
    65 00000129 0A00               
    66                                  
    67 0000012B 4920686F706520796F-     goodbye db "I hope you like working with 8-byte numbers.  Enjoy your programming.", 10, 0
    67 00000134 75206C696B6520776F-
    67 0000013D 726B696E6720776974-
    67 00000146 6820382D6279746520-
    67 0000014F 6E756D626572732E20-
    67 00000158 20456E6A6F7920796F-
    67 00000161 75722070726F677261-
    67 0000016A 6D6D696E672E0A00   
    68                                  
    69 00000172 257300                  stringformat db "%s", 0                                     ;general string format
    70                                  
    71 00000175 256C6600                eight_byte_format db "%lf", 0                               ;general 8-byte float format
    72                                  
    73                                  segment .bss                                                ;Declare pointers to un-initialized space in this segment.
    74                                  
    75                                  ;This segment is empty.
    76                                  
    77                                  ;==================================================================================================================================
    78                                  ;===== Begin the application here: show how to input and output floating point numbers ============================================
    79                                  ;==================================================================================================================================
    80                                  
    81                                  segment .text                                               ;Place executable instructions in this segment.
    82                                  
    83                                  control_d:                                                  ;Entry point.  Execution begins here.
    84                                  
    85                                  ;The next two instructions should be performed at the start of every assembly program.
    86 00000000 55                      push       rbp                                              ;This marks the start of a new stack frame belonging to this execution
    87                                                                                              ;of this function.
    88 00000001 4889E5                  mov        rbp, rsp                                         ;rbp holds the address of the start of this new stack frame.  When
    89                                                                                              ;this function returns to its caller rbp must hold the same value it
    90                                                                                              ;holds now.
    91 00000004 6A00                    push qword 0                                                ;To stay on the 16-byte boundary pushes (and pops) should be done in
    92                                                                                              ;pairs.  This is the other member of the pair pushes: "push rbp" and
    93                                                                                              ;"push qword 0".
    94                                  ;=========== Show the initial message =============================================================================================
    95                                  ;Note that at this point there are no vital data in registers to be saved.  Therefore, there is no back up process at this time.
    96                                  
    97 00000006 B800000000              mov qword  rax, 0                                           ;No data from SSE will be printed
    98 0000000B 48BF-                   mov        rdi, stringformat                                ;"%s"
    98 0000000D [7201000000000000] 
    99 00000015 48BE-                   mov        rsi, initialmessage                              ;"This X86 program will demonstrate the use of Control-D ..."
    99 00000017 [0000000000000000] 
   100 0000001F E8(00000000)            call       printf                                           ;Call a library function to make the output
   101                                  
   102                                  ;=========== Prompt for a sequence of floating point numbers to be inputted =======================================================
   103                                  
   104 00000024 B800000000              mov qword  rax, 0                                           ;No data from SSE will be printed
   105 00000029 48BF-                   mov        rdi, stringformat                                ;"%s"
   105 0000002B [7201000000000000] 
   106 00000033 48BE-                   mov        rsi, promptmessage                               ;"Enter a sequence of floating point numbers in base 10 separate ..."
   106 00000035 [4D00000000000000] 
   107 0000003D E8(00000000)            call       printf                                           ;Call a library function to make the output
   108                                  
   109                                  ;===== Loop to input floating point numbers until Control+D =======================================================================
   110                                  
   111 00000042 41BF00000000            mov        r15, 0                                           ;Initialize the counter to 0
   112                                  begin_loop:
   113                                  
   114 00000048 6A00                    push qword 0                                                ;Reserve 8 bytes of storage for the incoming number
   115 0000004A B800000000              mov qword  rax, 0                                           ;SSE is not involved in this scanf operation
   116 0000004F 48BF-                   mov        rdi, eight_byte_format                           ;"%lf"
   116 00000051 [7501000000000000] 
   117 00000059 4889E6                  mov        rsi, rsp                                         ;Give scanf a pointer to the reserved storage
   118 0000005C E8(00000000)            call       scanf                                            ;Call a library function to do the input work
   119                                  
   120                                  ;|------------Obsolete code removed---------------------------Obsolete code removed---------------------------------|
   121                                  ;|cdq                                                         ;Place into rdx sign-extension of that 32-bit number  |
   122                                  ;|shl rdx, 32                                                 ;Shift the sign extension 32 bits to the left         |
   123                                  ;|or rax, rdx                                                 ;Perform the operation rax = rax or rdx               |
   124                                  ;|------------End of obsolete code removed--------------------End of obsolete code removed--------------------------|
   125                                  
   126                                  ;+++++++++++++Modern code replaced obsolete code++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++|
   127 00000061 4898                    cdqe                                                        ;Sign extend the integer in eax to all of rax     |
   128                                                                                              ;Reference: Ed jorgensen book (Sept 2018), page 79|
   129                                  ;+++++++++++++End of modern code replacing obsolete code++++++++++++++++++++++++++++++++++++++++++++++++++++++|
   130                                  
   131 00000063 4883F800                cmp        rax, 0                                          ;Compare rax with -1
   132 00000067 740C                    je         loop_finished                                    ;if rax == -1 then exit from the loop
   133 00000069 F2440F103C24            movsd      xmm15, [rsp]                                      ;Copy the inputted number to xmm15, where it will be abandoned.
   134 0000006F 58                      pop        rax                                              ;Make free the storage that was used by scanf
   135 00000070 49FFC7                  inc        r15                                              ;Add 1 to the loop counter
   136 00000073 EBD3                    jmp        begin_loop                                       ;Repeat the loop one more time.
   137                                  
   138                                  loop_finished:
   139 00000075 58                      pop        rax                                              ;Remove that last remaining push resulting from the loop.
   140 00000076 58                      pop        rax                                              ;Remove the 0 that put us on the boundary.
   141                                  ;===== Output the count of numbers entered ========================================================================================
   142                                  
   143 00000077 B800000000              mov qword  rax, 0
   144 0000007C 48BF-                   mov        rdi, count_message                               ;"You have entered %1ld floating point numbers."
   144 0000007E [FC00000000000000] 
   145 00000086 4C89FE                  mov        rsi, r15                                         ;Copy the number of inputs to rsi
   146 00000089 E8(00000000)            call       printf                                           ;Call a function in the C language library
   147                                  
   148                                  ;===== Output the good-bye message ================================================================================================
   149                                  
   150 0000008E B800000000              mov        rax, 0
   151 00000093 48BF-                   mov        rdi, stringformat                                ;"%s"
   151 00000095 [7201000000000000] 
   152 0000009D 48BE-                   mov        rsi, goodbye                                     ;"I hope you like working with 8-byte numbers..."
   152 0000009F [2B01000000000000] 
   153 000000A7 E8(00000000)            call       printf                                           ;Call a function in the C language library
   154                                  
   155                                  ;===== For an improved learning experience we'll return to the caller module the last numbered entered. ===========================
   156                                  
   157 000000AC F2410F10C7              movsd       xmm0, xmm15
   158                                  
   159                                  ;===== Restore the pointer to the start of the stack frame before exiting from this function ======================================
   160                                  
   161 000000B1 5D                      pop        rbp                                              ;Now the system stack is in the same state it was when this function
   162                                                                                              ;began execution.
   163                                  
   164 000000B2 C3                      ret                                                         ;Pop a qword from the stack into rip, and continue executing..
   165                                  ;========== End of program control-d.asm ==========================================================================================
   166                                  ;========1=========2=========3=========4=========5=========6=========7=========8=========9=========0=========1=========2=========3**
